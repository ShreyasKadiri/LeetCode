class Solution{
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n=graph.length;
        Arrays.sort(initial);
        Set<Integer> malware= new HashSet<>();
        for (int i:initial) {
            malware.add(i);
        }
        
        int num=-1;
        int result=-1;
        for (int i:initial) {
            int saved=0;
            Set<Integer> visited = new HashSet<>();
            visited.add(i);
            
            for (int j=0; j<n; j++) {
                if (i!=j && graph[i][j]==1) {
                    int temp=dfs(j, malware,visited,graph);
                    if(temp<0) 
                    continue;
                    saved+=temp;
                }
            }
            
            if (saved>num) {
                num=saved;
                result=i;
            }
        }
        return result;
    }
    
    public int dfs(int node, Set<Integer> malware, Set<Integer> visited, int[][] graph) {
        if (!visited.add(node)) 
        return 0;
        if (malware.contains(node)) 
            return -1;
        int saved=1;
        for (int j=0; j<graph.length; j++) {
            if (node!=j && graph[node][j]==1) {
                int temp=dfs(j,malware,visited,graph);
                if (temp<0) {
                    malware.add(node);
                    return -1;
                }
                saved+=temp;
            }
        }
        return saved;
    }
}
